
================================================================================
File: Category.cs
Size: 461 B
================================================================================

﻿using System.ComponentModel.DataAnnotations;

namespace CalendarApp.Data.Models
{
    public class Category
    {
        [Key]
        public Guid Id { get; set; } = Guid.NewGuid();

        [Required, StringLength(50)]
        public string Name { get; set; }

        [StringLength(20)]
        public string? Color { get; set; } // Hex code, напр. "#00AEEF"

        public ICollection<Meeting> Meetings { get; set; } = [];
    }
}


================================================================================
File: Contact.cs
Size: 998 B
================================================================================

﻿using Microsoft.AspNetCore.Identity;
using System.ComponentModel.DataAnnotations;

namespace CalendarApp.Data.Models
{
    public class Contact : IdentityUser<Guid>
    {
        [Required, StringLength(50)]
        public string FirstName { get; set; }

        [Required, StringLength(50)]
        public string LastName { get; set; }

        [DataType(DataType.Date)]
        public DateTime? BirthDate { get; set; }

        [StringLength(100)]
        public string? Address { get; set; }

        [StringLength(250)]
        public string? Note { get; set; }

        public ICollection<MeetingParticipant> MeetingParticipants { get; set; } = [];
        public ICollection<Message> SentMessages { get; set; } = [];
        public ICollection<Friendship> SentFriendRequests { get; set; } = [];
        public ICollection<Friendship> ReceivedFriendRequests { get; set; } = [];
        public ICollection<Notification> Notifications { get; set; } = [];
    }
}


================================================================================
File: Friendship.cs
Size: 692 B
================================================================================

﻿using System.ComponentModel.DataAnnotations;

namespace CalendarApp.Data.Models
{
    public enum FriendshipStatus
    {
        Pending,
        Accepted,
        Declined,
        Blocked
    }

    public class Friendship
    {
        [Key]
        public Guid Id { get; set; } = Guid.NewGuid();

        public Guid RequesterId { get; set; }
        public Contact Requester { get; set; }

        public Guid ReceiverId { get; set; }
        public Contact Receiver { get; set; }

        [Required]
        public FriendshipStatus Status { get; set; } = FriendshipStatus.Pending;

        public DateTime CreatedAt { get; set; } = DateTime.Now;
    }
}


================================================================================
File: Meeting.cs
Size: 731 B
================================================================================

﻿using System.ComponentModel.DataAnnotations;

namespace CalendarApp.Data.Models
{
    public class Meeting
    {
        [Key]
        public Guid Id { get; set; } = Guid.NewGuid();

        [Required]
        public DateTime StartTime { get; set; }

        [StringLength(100)]
        public string? Location { get; set; }

        [StringLength(500)]
        public string? Description { get; set; }

        public Guid? CategoryId { get; set; }
        public Category? Category { get; set; }

        [Required]
        public Guid CreatedById { get; set; }
        public Contact CreatedBy { get; set; }

        public ICollection<MeetingParticipant> Participants { get; set; } = [];
    }
}


================================================================================
File: MeetingParticipant.cs
Size: 664 B
================================================================================

﻿using System.ComponentModel.DataAnnotations;

namespace CalendarApp.Data.Models
{
    public enum ParticipantStatus
    {
        Pending = 0,
        Accepted = 1,
        Declined = 2
    }

    public class MeetingParticipant
    {
        [Key]
        public Guid Id { get; set; } = Guid.NewGuid();

        [Required]
        public Guid MeetingId { get; set; }
        public Meeting Meeting { get; set; }

        [Required]
        public Guid ContactId { get; set; }
        public Contact Contact { get; set; }

        [Required]
        public ParticipantStatus Status { get; set; } = ParticipantStatus.Pending;
    }
}


================================================================================
File: Message.cs
Size: 906 B
================================================================================

﻿using System.ComponentModel.DataAnnotations;

namespace CalendarApp.Data.Models
{
    public class Message
    {
        [Key]
        [StringLength(36)]
        public Guid Id { get; set; } = Guid.NewGuid();

        // Optional link to a friendship (1:1 chat)
        public Guid? FriendshipId { get; set; }
        public Friendship? Friendship { get; set; }

        // Optional link to a meeting (group chat)
        public Guid? MeetingId { get; set; }
        public Meeting? Meeting { get; set; }

        // Sender (required)
        [Required]
        public Guid SenderId { get; set; }
        public Contact Sender { get; set; }

        // Message text
        [Required, StringLength(1000)]
        public string Content { get; set; }

        public DateTime SentAt { get; set; } = DateTime.UtcNow;

        public bool IsRead { get; set; } = false;
    }
}

================================================================================
File: Notification.cs
Size: 742 B
================================================================================

﻿using System.ComponentModel.DataAnnotations;

namespace CalendarApp.Data.Models
{
    public enum NotificationType
    {
        Info,
        Warning,
        Invitation,
        Reminder
    }

    public class Notification
    {
        [Key]
        public Guid Id { get; set; } = Guid.NewGuid();

        [Required]
        public Guid UserId { get; set; }
        public Contact User { get; set; }

        [Required, StringLength(200)]
        public string Message { get; set; }

        [Required]
        public NotificationType Type { get; set; } = NotificationType.Info;

        public bool IsRead { get; set; } = false;

        public DateTime CreatedAt { get; set; } = DateTime.Now;
    }
}

