@model MeetingDetailsViewModel
@{ 
    ViewData["Title"] = "Meeting details";
    var message = TempData["MeetingMessage"] as string;
    var error = TempData["MeetingError"] as string;
    var statusOptions = Enum.GetValues<ParticipantStatus>();
    string FormatStatusClass(ParticipantStatus status) => status switch
    {
        ParticipantStatus.Accepted => "bg-success",
        ParticipantStatus.Declined => "bg-danger",
        _ => "bg-warning text-dark"
    };
    string FormatStatusLabel(ParticipantStatus status) => status switch
    {
        ParticipantStatus.Accepted => "Accepted",
        ParticipantStatus.Declined => "Declined",
        _ => "Pending"
    };
}

<div class="meeting-details-page">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 fw-bold mb-1">Meeting overview</h1>
            <p class="text-muted mb-0">@Model.StartTime.ToLocalTime().ToString("f")</p>
        </div>
        <div class="d-flex gap-2 align-items-center flex-wrap justify-content-end">
            @if (Model.ViewerIsCreator)
            {
                <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model.Id">Edit meeting</a>
            }
            else if (Model.ViewerIsParticipant && Model.ViewerStatus.HasValue)
            {
                <form asp-action="UpdateStatus" asp-route-id="@Model.Id" method="post" class="d-flex align-items-center gap-2">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="returnUrl" value="@Url.Action("Details", "Meetings", new { id = Model.Id })" />
                    <label class="form-label mb-0 me-1" for="viewer-status">Your status</label>
                    <select class="form-select form-select-sm" id="viewer-status" name="status">
                        @foreach (var status in statusOptions)
                        {
                            <option value="@((int)status)" @(Model.ViewerStatus == status ? "selected" : string.Empty)>@FormatStatusLabel(status)</option>
                        }
                    </select>
                    <button type="submit" class="btn btn-outline-primary btn-sm">Save</button>
                </form>
            }
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(message))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <span>@message</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    if (!string.IsNullOrWhiteSpace(error))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <span>@error</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row g-4">
        <div class="col-12 col-lg-6">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body">
                    <h2 class="h5 fw-semibold mb-3">Details</h2>
                    <dl class="row mb-0">
                        <dt class="col-sm-4 text-muted">Organizer</dt>
                        <dd class="col-sm-8">@Model.CreatedByName</dd>
                        <dt class="col-sm-4 text-muted">When</dt>
                        <dd class="col-sm-8">@Model.StartTime.ToLocalTime().ToString("f")</dd>
                        <dt class="col-sm-4 text-muted">Location</dt>
                        <dd class="col-sm-8">@(!string.IsNullOrWhiteSpace(Model.Location) ? Model.Location : "No location set")</dd>
                        <dt class="col-sm-4 text-muted">Description</dt>
                        <dd class="col-sm-8">@(!string.IsNullOrWhiteSpace(Model.Description) ? Model.Description : "No description provided")</dd>
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-12 col-lg-6">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <h2 class="h5 fw-semibold mb-0">Participants</h2>
                            <p class="text-muted small mb-0">@Model.Participants.Count participant@(Model.Participants.Count == 1 ? string.Empty : "s")</p>
                        </div>
                    </div>

                    @if (!Model.Participants.Any())
                    {
                        <p class="text-muted mb-0">No participants yet.</p>
                    }
                    else
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var participant in Model.Participants)
                            {
                                var isViewer = participant.ContactId == Model.ViewerId;
                                <div class="list-group-item px-0">
                                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                                        <div>
                                            <div class="fw-semibold">@participant.DisplayName @if (participant.IsCreator) { <span class="badge bg-primary ms-1">Organizer</span> }</div>
                                            <div class="text-muted small">@participant.Email</div>
                                        </div>
                                        <div class="d-flex align-items-center gap-2">
                                            @if (Model.ViewerIsCreator)
                                            {
                                                <span class="badge @FormatStatusClass(participant.Status)">@FormatStatusLabel(participant.Status)</span>
                                            }
                                            else if (!isViewer)
                                            {
                                                <form asp-controller="Friendships" asp-action="Send" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="receiverId" value="@participant.ContactId" />
                                                    <button type="submit" class="btn btn-outline-primary btn-sm">Add friend</button>
                                                </form>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (() => {
            const alerts = document.querySelectorAll('.meeting-details-page .alert');
            if (!alerts.length) return;
            alerts.forEach(alert => {
                const timeout = setTimeout(() => {
                    const bsAlert = bootstrap?.Alert?.getOrCreateInstance(alert);
                    bsAlert?.close();
                }, 4000);
                alert.addEventListener('close.bs.alert', () => clearTimeout(timeout));
            });
        })();
    </script>
}
