@model MeetingDetailsViewModel
@using CalendarApp.Models.Chat
@using System.Globalization
@{
    ViewData["Title"] = "Meeting details";
    var message = TempData["MeetingMessage"] as string;
    var error = TempData["MeetingError"] as string;
    var statusOptions = Enum.GetValues<ParticipantStatus>();
    string FormatStatusClass(ParticipantStatus status) => status switch
    {
        ParticipantStatus.Accepted => "bg-success",
        ParticipantStatus.Declined => "bg-danger",
        _ => "bg-warning text-dark"
    };
    string FormatStatusLabel(ParticipantStatus status) => status switch
    {
        ParticipantStatus.Accepted => "Accepted",
        ParticipantStatus.Declined => "Declined",
        _ => "Pending"
    };

    string BuildCategoryBadgeStyle(string? color)
    {
        if (string.IsNullOrWhiteSpace(color))
        {
            return string.Empty;
        }

        return $"background-color: {color}; border-color: {color}; color: #fff;";
    }

    var chatEnabled = Model.ViewerIsCreator || (Model.ViewerIsParticipant && Model.ViewerStatus == ParticipantStatus.Accepted);
    var accentPalette = new[] { "accent-blue", "accent-purple", "accent-green", "accent-orange", "accent-teal" };
    string BuildAccent(Guid id) => accentPalette[Math.Abs(id.GetHashCode()) % accentPalette.Length];
    string BuildInitials(string? text)
    {
        if (string.IsNullOrWhiteSpace(text))
        {
            return "М";
        }

        var trimmed = text.Trim();
        return new string(new[] { char.ToUpper(trimmed[0], CultureInfo.GetCultureInfo("bg-BG")) });
    }

    string BuildMeetingTitle(string? description, DateTime startTimeUtc)
    {
        if (!string.IsNullOrWhiteSpace(description))
        {
            return description.Trim();
        }

        var local = DateTime.SpecifyKind(startTimeUtc, DateTimeKind.Utc).ToLocalTime();
        return $"Събитие на {local:dd MMM yyyy}";
    }

    string BuildMeetingSubtitle(DateTime startTimeUtc, string? location)
    {
        var local = DateTime.SpecifyKind(startTimeUtc, DateTimeKind.Utc).ToLocalTime();
        var formatted = local.ToString("g", CultureInfo.GetCultureInfo("bg-BG"));
        if (string.IsNullOrWhiteSpace(location))
        {
            return formatted;
        }

        return $"{formatted} • {location.Trim()}";
    }

    var meetingTitle = BuildMeetingTitle(Model.Description, Model.StartTime);
    var meetingSubtitle = BuildMeetingSubtitle(Model.StartTime, Model.Location);
    var meetingAccent = BuildAccent(Model.Id);
    var meetingInitials = BuildInitials(meetingTitle);
    var viewerName = Model.Participants.FirstOrDefault(p => p.ContactId == Model.ViewerId)?.DisplayName
        ?? (User?.Identity?.Name ?? string.Empty);
}

<div class="meeting-details-page">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 fw-bold mb-1">Meeting overview</h1>
            <p class="text-muted mb-0">@Model.StartTime.ToLocalTime().ToString("f")</p>
        </div>
        <div class="d-flex gap-2 align-items-center flex-wrap justify-content-end">
            @if (Model.ViewerIsCreator)
            {
                <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model.Id">Edit meeting</a>
            }
            else if (Model.ViewerIsParticipant && Model.ViewerStatus.HasValue)
            {
                <form asp-action="UpdateStatus" asp-route-id="@Model.Id" method="post" class="d-flex align-items-center gap-2">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="returnUrl" value="@Url.Action("Details", "Meetings", new { id = Model.Id })" />
                    <label class="form-label mb-0 me-1" for="viewer-status">Your status</label>
                    <select class="form-select form-select-sm" id="viewer-status" name="status">
                        @foreach (var status in statusOptions)
                        {
                            <option value="@((int)status)" selected="@(Model.ViewerStatus == status ? true : false)">@FormatStatusLabel(status)</option>
                        }
                    </select>
                    <button type="submit" class="btn btn-outline-primary btn-sm">Save</button>
                </form>
            }
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(message))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <span>@message</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(error))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <span>@error</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row g-4">
        <div class="col-12 col-lg-6">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body">
                    <h2 class="h5 fw-semibold mb-3">Details</h2>
                    <dl class="row mb-0">
                        <dt class="col-sm-4 text-muted">Organizer</dt>
                        <dd class="col-sm-8">@Model.CreatedByName</dd>
                        <dt class="col-sm-4 text-muted">When</dt>
                        <dd class="col-sm-8">@Model.StartTime.ToLocalTime().ToString("f")</dd>
                        <dt class="col-sm-4 text-muted">Location</dt>
                        <dd class="col-sm-8">@(!string.IsNullOrWhiteSpace(Model.Location) ? Model.Location : "No location set")</dd>
                        <dt class="col-sm-4 text-muted">Category</dt>
                        <dd class="col-sm-8">
                            @if (!string.IsNullOrWhiteSpace(Model.CategoryName))
                            {
                                <span class="badge rounded-pill" style="@BuildCategoryBadgeStyle(Model.CategoryColor)">@Model.CategoryName</span>
                            }
                            else
                            {
                                <span class="text-muted">Unknown category</span>
                            }
                        </dd>
                        <dt class="col-sm-4 text-muted">Description</dt>
                        <dd class="col-sm-8">@(!string.IsNullOrWhiteSpace(Model.Description) ? Model.Description : "No description provided")</dd>
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-12 col-lg-6">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <h2 class="h5 fw-semibold mb-0">Participants</h2>
                            <p class="text-muted small mb-0">@Model.Participants.Count participant@(Model.Participants.Count == 1 ? string.Empty : "s")</p>
                        </div>
                    </div>

                    @if (!Model.Participants.Any())
                    {
                        <p class="text-muted mb-0">No participants yet.</p>
                    }
                    else
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var participant in Model.Participants)
                            {
                                var isViewer = participant.ContactId == Model.ViewerId;
                                <div class="list-group-item px-0">
                                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                                        <div>
                                            <div class="fw-semibold">@participant.DisplayName @if (participant.IsCreator) { <span class="badge bg-primary ms-1">Organizer</span> }</div>
                                            <div class="text-muted small">@participant.Email</div>
                                        </div>
                                        <div class="d-flex align-items-center gap-2">
                                            @if (Model.ViewerIsCreator)
                                            {
                                                <span class="badge @FormatStatusClass(participant.Status)">@FormatStatusLabel(participant.Status)</span>
                                            }
                                            else if (!isViewer)
                                            {
                                                <form asp-controller="Friendships" asp-action="Send" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="receiverId" value="@participant.ContactId" />
                                                    <button type="submit" class="btn btn-outline-primary btn-sm">Add friend</button>
                                                </form>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (chatEnabled)
    {
        <div class="meeting-chat-widget mt-4">
            <div class="card shadow-sm border-0">
                <div class="card-body d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                    <div>
                        <h2 class="h5 fw-semibold mb-1">Meeting chat</h2>
                        <p class="text-muted small mb-0">Chat with organizers and confirmed attendees.</p>
                    </div>
                    <button class="btn btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#meetingChatModal">
                        Open chat
                    </button>
                </div>
            </div>
        </div>

        <div class="modal fade" id="meetingChatModal" tabindex="-1" aria-labelledby="meetingChatModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="modal-title fs-5" id="meetingChatModalLabel">Meeting chat</h2>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="messenger-layout messenger-layout--embedded">
                            <aside class="messenger-sidebar">
                                <div class="messenger-sidebar__section">
                                    <div class="messenger-thread-list">
                                        <button class="messenger-thread active" type="button"
                                                data-thread-id="@Model.Id"
                                                data-thread-type="meeting"
                                                data-fetch-url="@Url.Action("Thread", "Chat", new { id = Model.Id, type = ThreadType.Meeting })"
                                                data-display-name="@meetingTitle"
                                                data-secondary="@meetingSubtitle"
                                                data-status=""
                                                data-avatar="@meetingInitials"
                                                data-accent="@meetingAccent"
                                                data-last-message=""
                                                data-meeting-id="@Model.Id">
                                            <span class="messenger-avatar @meetingAccent">@meetingInitials</span>
                                            <span class="messenger-thread__content">
                                                <span class="messenger-thread__name">@meetingTitle</span>
                                                <span class="messenger-thread__preview">Няма съобщения</span>
                                            </span>
                                            <span class="messenger-thread__meta"></span>
                                        </button>
                                    </div>
                                </div>
                            </aside>
                            <section class="messenger-content">
                                <header class="messenger-header">
                                    <div class="messenger-contact" aria-live="polite">
                                        <span id="activeContactAvatar" class="messenger-avatar @meetingAccent">@meetingInitials</span>
                                        <span class="messenger-contact__meta">
                                            <span id="activeContactName" class="messenger-contact__name">@meetingTitle</span>
                                            <span id="activeContactStatus" class="messenger-contact__status">@meetingSubtitle</span>
                                        </span>
                                    </div>
                                    <div class="messenger-self">
                                        <label class="messenger-label" for="userInput">Вашето име</label>
                                        <input id="userInput" class="messenger-input" value="@viewerName" readonly />
                                    </div>
                                </header>
                                <div id="chatMessages"
                                     class="messenger-messages"
                                     data-empty="true"
                                     data-thread-id="@Model.Id"
                                     data-thread-type="meeting"
                                     data-current-user-id="@Model.ViewerId"
                                     data-current-user-name="@viewerName">
                                    <div class="messenger-empty-state">
                                        <h3 class="messenger-empty-state__title">Изберете приятел или започнете нов разговор</h3>
                                        <p class="messenger-empty-state__text">Съобщенията се появяват тук веднага щом някой напише нещо.</p>
                                    </div>
                                </div>
                                <form id="chatForm" class="messenger-form" autocomplete="off">
                                    <div class="messenger-form__composer">
                                        <textarea id="messageInput"
                                                  class="messenger-input messenger-input--multiline"
                                                  rows="1"
                                                  placeholder="Напишете съобщение..."
                                                  required></textarea>
                                    </div>
                                    <div class="messenger-form__actions">
                                        <button id="sendButton" type="submit" class="messenger-button">Изпрати</button>
                                    </div>
                                </form>
                            </section>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @if (chatEnabled)
    {
        <script src="https://cdn.jsdelivr.net/npm/@microsoft/signalr@9.0.6/dist/browser/signalr.min.js" crossorigin="anonymous"></script>
        <script src="~/js/chat.js" asp-append-version="true"></script>
    }
    <script>
        (() => {
            const alerts = document.querySelectorAll('.meeting-details-page .alert');
            if (!alerts.length) return;
            alerts.forEach(alert => {
                const timeout = setTimeout(() => {
                    const bsAlert = bootstrap?.Alert?.getOrCreateInstance(alert);
                    bsAlert?.close();
                }, 4000);
                alert.addEventListener('close.bs.alert', () => clearTimeout(timeout));
            });
        })();
    </script>
}
