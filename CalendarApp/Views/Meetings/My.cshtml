@model MeetingListViewModel
@{
    ViewData["Title"] = "My meetings";
    var message = TempData["MeetingMessage"] as string;
    var error = TempData["MeetingError"] as string;
    string FormatStatusBadge(MeetingListItemViewModel meeting)
    {
        if (!meeting.ViewerStatus.HasValue)
        {
            return "";
        }

        return meeting.ViewerStatus.Value switch
        {
            ParticipantStatus.Accepted => "bg-success",
            ParticipantStatus.Declined => "bg-danger",
            _ => "bg-warning text-dark"
        };
    }

    string FormatStatusLabel(ParticipantStatus status) => status switch
    {
        ParticipantStatus.Accepted => "Accepted",
        ParticipantStatus.Declined => "Declined",
        _ => "Pending"
    };

    var statusOptions = Enum.GetValues<ParticipantStatus>();

    string BuildCategoryBadgeStyle(string? color)
    {
        if (string.IsNullOrWhiteSpace(color))
        {
            return string.Empty;
        }

        return $"background-color: {color}; border-color: {color}; color: #fff;";
    }
}

<div class="meeting-list-page">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3 mb-4">
        <div>
            <h1 class="h3 fw-bold mb-1">Meetings</h1>
            <p class="text-muted mb-0">Review the meetings you organize or attend.</p>
        </div>
        <a class="btn btn-primary" asp-action="Create">Create meeting</a>
    </div>

    @if (!string.IsNullOrWhiteSpace(message))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <span>@message</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (!string.IsNullOrWhiteSpace(error))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <span>@error</span>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Meetings.Any())
    {
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <p class="text-muted mb-0">You are not part of any meetings yet. Start by creating one or wait for an invitation.</p>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex flex-column gap-3">
            @foreach (var meeting in Model.Meetings)
            {
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex flex-column flex-lg-row justify-content-between gap-3">
                            <div class="flex-grow-1">
                                <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                                    <h2 class="h5 fw-semibold mb-0">@meeting.StartTime.ToLocalTime().ToString("f")</h2>
                                    @if (!string.IsNullOrWhiteSpace(meeting.CategoryName))
                                    {
                                        <span class="badge rounded-pill" style="@BuildCategoryBadgeStyle(meeting.CategoryColor)">@meeting.CategoryName</span>
                                    }
                                    @if (meeting.ViewerStatus.HasValue)
                                    {
                                        <span class="badge @FormatStatusBadge(meeting)">@FormatStatusLabel(meeting.ViewerStatus.Value)</span>
                                    }
                                </div>
                                <p class="text-muted mb-1">Organized by @meeting.CreatedByName</p>
                                <p class="mb-1"><strong>Location:</strong> @(string.IsNullOrWhiteSpace(meeting.Location) ? "No location set" : meeting.Location)</p>
                                <p class="mb-2"><strong>Description:</strong> @(string.IsNullOrWhiteSpace(meeting.Description) ? "No description provided" : meeting.Description)</p>
                                <p class="text-muted small mb-0">@meeting.ParticipantCount participant@(meeting.ParticipantCount == 1 ? string.Empty : "s")</p>
                            </div>
                            <div class="d-flex flex-column align-items-stretch gap-2">
                                <a class="btn btn-outline-secondary" asp-action="Details" asp-route-id="@meeting.Id">View details</a>
                                @if (meeting.ViewerIsCreator)
                                {
                                    <a class="btn btn-primary" asp-action="Edit" asp-route-id="@meeting.Id">Edit meeting</a>
                                }
                                else if (meeting.ViewerStatus.HasValue)
                                {
                                    <form asp-action="UpdateStatus" asp-route-id="@meeting.Id" method="post" class="d-flex flex-column gap-2">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="returnUrl" value="@Url.Action("My", "Meetings")" />
                                        <label class="form-label small mb-0" for="status-@meeting.Id">Update your status</label>
                                        <div class="d-flex gap-2 align-items-center">
                                            <select class="form-select form-select-sm" id="status-@meeting.Id" name="status">
                                                @foreach (var status in statusOptions)
                                                {
                                                    <option value="@((int)status)" selected="@(meeting.ViewerStatus == status ? true : false)">@FormatStatusLabel(status)</option>
                                                }
                                            </select>
                                            <button type="submit" class="btn btn-sm btn-outline-primary">Save</button>
                                        </div>
                                    </form>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        (() => {
            const alerts = document.querySelectorAll('.meeting-list-page .alert');
            if (!alerts.length) return;
            alerts.forEach(alert => {
                const timeout = setTimeout(() => {
                    const bsAlert = bootstrap?.Alert?.getOrCreateInstance(alert);
                    bsAlert?.close();
                }, 4000);
                alert.addEventListener('close.bs.alert', () => clearTimeout(timeout));
            });
        })();
    </script>
}
