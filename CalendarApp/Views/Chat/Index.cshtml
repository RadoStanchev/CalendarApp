@model CalendarApp.Models.Chat.ChatViewModel
@using System.Globalization
@using System.Linq
@using CalendarApp.Models.Chat
@{ 
    ViewData["Title"] = "Live Chat";

    ChatThreadViewModel? ResolveActiveThread()
    {
        if (!Model.ActiveThreadId.HasValue || !Model.ActiveThreadType.HasValue)
        {
            return null;
        }

        return Model.ActiveThreadType == ThreadType.Meeting
            ? Model.MeetingThreads.FirstOrDefault(t => t.ThreadId == Model.ActiveThreadId)
            : Model.FriendshipThreads.FirstOrDefault(t => t.ThreadId == Model.ActiveThreadId);
    }

    var activeThread = ResolveActiveThread();
    var hasThreads = Model.FriendshipThreads.Any() || Model.MeetingThreads.Any();
    var activeContactName = activeThread?.DisplayName ?? "Изберете разговор";
    var activeContactStatus = !string.IsNullOrWhiteSpace(activeThread?.SecondaryLabel)
        ? activeThread!.SecondaryLabel
        : activeThread?.LastActivityLabel ?? string.Empty;
    var activeContactAvatar = activeThread?.AvatarInitials ?? "";
    var activeAccent = activeThread?.AccentClass ?? "accent-blue";

    var activeFriendThreads = Model.FriendshipThreads.Take(3).ToList();
    var recentFriendThreads = Model.FriendshipThreads.Skip(3).ToList();
    var meetingThreads = Model.MeetingThreads.ToList();

    string FormatMeta(DateTime? sentAt)
    {
        if (!sentAt.HasValue)
        {
            return string.Empty;
        }

        var local = DateTime.SpecifyKind(sentAt.Value, DateTimeKind.Utc).ToLocalTime();
        var diff = DateTime.Now - local;

        if (diff.TotalMinutes < 1)
        {
            return "Сега";
        }

        if (diff.TotalHours < 1)
        {
            return $"{Math.Floor(diff.TotalMinutes)} мин";
        }

        if (diff.TotalDays < 1)
        {
            return $"{Math.Floor(diff.TotalHours)} ч";
        }

        if (diff.TotalDays < 7)
        {
            return $"{Math.Floor(diff.TotalDays)} дни";
        }

        return local.ToString("d", CultureInfo.GetCultureInfo("bg-BG"));
    }
}

<div class="messenger-layout">
    <aside class="messenger-sidebar">
        <div class="messenger-sidebar__header">
            <h2 class="messenger-sidebar__title">Разговори</h2>
            <button class="messenger-sidebar__new" type="button" aria-label="Нов чат">
                <span aria-hidden="true">+</span>
            </button>
        </div>
        <div class="messenger-sidebar__search">
            <input id="chatSearch" class="messenger-input" type="search" placeholder="Търсене на разговори" />
        </div>
        <div class="messenger-sidebar__section">
            <h3 class="messenger-sidebar__subtitle">Събития</h3>
            <div class="messenger-thread-list" id="meetingThreads">
                @if (!meetingThreads.Any())
                {
                    <p class="text-muted">Няма предстоящи събития с чат.</p>
                }
                else
                {
                    foreach (var thread in meetingThreads)
                    {
                        var isActiveMeeting = Model.ActiveThreadType == ThreadType.Meeting && Model.ActiveThreadId == thread.ThreadId;
                        var fetchUrl = Url.Action("Thread", "Chat", new { id = thread.ThreadId, type = ThreadType.Meeting });
                        <button class="messenger-thread @(isActiveMeeting ? "active" : string.Empty)" type="button"
                                data-thread-id="@thread.ThreadId"
                                data-thread-type="meeting"
                                data-fetch-url="@fetchUrl"
                                data-display-name="@thread.DisplayName"
                                data-secondary="@thread.SecondaryLabel"
                                data-status="@thread.LastActivityLabel"
                                data-avatar="@thread.AvatarInitials"
                                data-accent="@thread.AccentClass"
                                data-last-message="@thread.LastMessagePreview"
                                data-meeting-id="@thread.Meeting?.MeetingId">
                            <span class="messenger-avatar @thread.AccentClass">@thread.AvatarInitials</span>
                            <span class="messenger-thread__content">
                                <span class="messenger-thread__name">@thread.DisplayName</span>
                                <span class="messenger-thread__preview">@(string.IsNullOrWhiteSpace(thread.LastMessagePreview) ? "Няма съобщения" : thread.LastMessagePreview)</span>
                            </span>
                            <span class="messenger-thread__meta">@FormatMeta(thread.LastMessageAt)</span>
                        </button>
                    }
                }
            </div>
        </div>
        <div class="messenger-sidebar__section">
            <h3 class="messenger-sidebar__subtitle">Активни приятели</h3>
            <div class="messenger-thread-list" id="chatThreads">
                @if (!activeFriendThreads.Any())
                {
                    <p class="text-muted">Добавете приятели, за да започнете разговор.</p>
                }
                else
                {
                    foreach (var thread in activeFriendThreads)
                    {
                        var isActive = Model.ActiveThreadType == ThreadType.Friendship && Model.ActiveThreadId == thread.ThreadId;
                        var fetchUrl = Url.Action("Thread", "Chat", new { id = thread.ThreadId, type = ThreadType.Friendship });
                        <button class="messenger-thread @(isActive ? "active" : string.Empty)" type="button"
                                data-thread-id="@thread.ThreadId"
                                data-thread-type="friendship"
                                data-fetch-url="@fetchUrl"
                                data-display-name="@thread.DisplayName"
                                data-secondary="@thread.SecondaryLabel"
                                data-status="@thread.LastActivityLabel"
                                data-avatar="@thread.AvatarInitials"
                                data-accent="@thread.AccentClass"
                                data-last-message="@thread.LastMessagePreview">
                            <span class="messenger-avatar @thread.AccentClass">@thread.AvatarInitials</span>
                            <span class="messenger-thread__content">
                                <span class="messenger-thread__name">@thread.DisplayName</span>
                                <span class="messenger-thread__preview">@(string.IsNullOrWhiteSpace(thread.LastMessagePreview) ? "Няма съобщения" : thread.LastMessagePreview)</span>
                            </span>
                            <span class="messenger-thread__meta">@FormatMeta(thread.LastMessageAt)</span>
                        </button>
                    }
                }
            </div>
        </div>
        <div class="messenger-sidebar__section">
            <h3 class="messenger-sidebar__subtitle">Скорошни разговори</h3>
            <div class="messenger-thread-list messenger-thread-list--compact">
                @if (!recentFriendThreads.Any())
                {
                    <p class="text-muted">Няма други разговори.</p>
                }
                else
                {
                    foreach (var thread in recentFriendThreads)
                    {
                        var isActive = Model.ActiveThreadType == ThreadType.Friendship && Model.ActiveThreadId == thread.ThreadId;
                        var fetchUrl = Url.Action("Thread", "Chat", new { id = thread.ThreadId, type = ThreadType.Friendship });
                        <button class="messenger-thread messenger-thread--compact @(isActive ? "active" : string.Empty)" type="button"
                                data-thread-id="@thread.ThreadId"
                                data-thread-type="friendship"
                                data-fetch-url="@fetchUrl"
                                data-display-name="@thread.DisplayName"
                                data-secondary="@thread.SecondaryLabel"
                                data-status="@thread.LastActivityLabel"
                                data-avatar="@thread.AvatarInitials"
                                data-accent="@thread.AccentClass"
                                data-last-message="@thread.LastMessagePreview">
                            <span class="messenger-avatar @thread.AccentClass">@thread.AvatarInitials</span>
                            <span class="messenger-thread__content">
                                <span class="messenger-thread__name">@thread.DisplayName</span>
                                <span class="messenger-thread__preview">@(string.IsNullOrWhiteSpace(thread.LastMessagePreview) ? "Няма съобщения" : thread.LastMessagePreview)</span>
                            </span>
                            <span class="messenger-thread__meta">@FormatMeta(thread.LastMessageAt)</span>
                        </button>
                    }
                }
            </div>
        </div>
    </aside>
    <section class="messenger-content">
        <header class="messenger-header">
            <div class="messenger-contact" aria-live="polite">
                <span id="activeContactAvatar" class="messenger-avatar @activeAccent">@activeContactAvatar</span>
                <span class="messenger-contact__meta">
                    <span id="activeContactName" class="messenger-contact__name">@activeContactName</span>
                    <span id="activeContactStatus" class="messenger-contact__status@(string.IsNullOrEmpty(activeContactStatus) ? " text-muted" : string.Empty)">@activeContactStatus</span>
                </span>
            </div>
            <div class="messenger-self">
                <label class="messenger-label" for="userInput">Вашето име</label>
                <input id="userInput" class="messenger-input" value="@Model.CurrentUserName" readonly />
            </div>
        </header>
        <div id="chatMessages"
             class="messenger-messages"
             data-empty="@(Model.Messages.Any() ? "false" : "true")"
             data-thread-id="@(Model.ActiveThreadId?.ToString() ?? string.Empty)"
             data-thread-type="@(Model.ActiveThreadType?.ToString().ToLowerInvariant() ?? string.Empty)"
             data-current-user-id="@Model.CurrentUserId"
             data-current-user-name="@Model.CurrentUserName">
            @if (!Model.Messages.Any())
            {
                <div class="messenger-empty-state">
                    <h3 class="messenger-empty-state__title">Изберете приятел или започнете нов разговор</h3>
                    <p class="messenger-empty-state__text">Съобщенията се появяват тук веднага щом някой напише нещо.</p>
                </div>
            }
            else
            {
                foreach (var message in Model.Messages)
                {
                    var isOwn = message.SenderId == Model.CurrentUserId;
                    <div class="message @(isOwn ? "message--outgoing" : "message--incoming")">
                        <div class="message__bubble">
                            <span class="message__author">@(isOwn ? "Вие" : message.SenderName)</span>
                            <p class="message__text">@message.Content</p>
                            <span class="message__meta">
                                @DateTime.SpecifyKind(message.SentAt, DateTimeKind.Utc).ToLocalTime().ToString("t", CultureInfo.GetCultureInfo("bg-BG"))
                            </span>
                        </div>
                    </div>
                }
            }
        </div>
        <form id="chatForm" class="messenger-form" autocomplete="off">
            <div class="messenger-form__composer">
                <textarea id="messageInput"
                          class="messenger-input messenger-input--multiline"
                          rows="1"
                          placeholder="Напишете съобщение..."
                          @(hasThreads ? null : "disabled")
                          required></textarea>
            </div>
            <div class="messenger-form__actions">
                <button id="sendButton" type="submit" class="messenger-button" @(hasThreads ? null : "disabled")>Изпрати</button>
            </div>
        </form>
    </section>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@9.0.6/dist/browser/signalr.min.js" crossorigin="anonymous"></script>
    <script src="~/js/chat.js" asp-append-version="true"></script>
}
